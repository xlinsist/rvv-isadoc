dict_info = dict()
list_integer = []
list_fixed_point = []
list_floating_point = []
list_reduction = []
list_mask = []
list_permutation = []

"""11. Vector Integer Arithmetic Instructions"""
dict_info["vadd"] = "Vector single-width integer add."
dict_info["vsub"] = "Vector single-width integer subtract."
dict_info["vrsub"] = "Integer reverse subtract, vd[i] = x[rs1](imm) - vs2[i]."
dict_info["vwaddu"] = "Widening unsigned integer add, 2*SEW = SEW + SEW."
dict_info["vwsubu"] = "Widening unsigned integer subtract, 2*SEW = SEW - SEW."
dict_info["vwadd"] = "Widening signed integer add, 2*SEW = SEW + SEW."
dict_info["vwsub"] = "Widening signed integer subtract, 2*SEW = SEW - SEW."
dict_info["vwaddu.w"] = "Widening unsigned integer add, 2*SEW = 2*SEW + SEW."
dict_info["vwsubu.w"] = "Widening unsigned integer subtract, 2*SEW = 2*SEW - SEW."
dict_info["vwadd.w"] = "Widening signed integer add, 2*SEW = 2*SEW + SEW."
dict_info["vwsub.w"] = "Widening signed integer subtract, 2*SEW = 2*SEW - SEW."
dict_info["vzext/vsext"] = "Vector integer extension to zero- or sign- extend a source vector integer operand with EEW less than SEW to fill SEW-sized elements in the destination."
# dict_info["vzext"] = "Vector integer extension to zero-extend a source vector integer operand with EEW less than SEW to fill SEW-sized elements in the destination."
# dict_info["vsext"] = "Vector integer extension to sign-extend a source vector integer operand with EEW less than SEW to fill SEW-sized elements in the destination."
dict_info["vadc"] = "Vector integer add-with-carry instruction to produce sum with carry."
dict_info["vmadc"] = "Vector integer add-with-carry instruction to produce carry out in mask register format."
dict_info["vsbc"] = "Vector integer subtract-with-borrow instruction to produce difference with borrow."
dict_info["vmsbc"] = "Vector integer subtract-with-borrow instruction to borrow out in mask register format."
dict_info["vand"] = "Bitwise logical and."
dict_info["vor"] = "Bitwise logical or."
dict_info["vxor"] = "Bitwise logical xor."
dict_info["vsll"] = "Logical shift left."
dict_info["vsrl"] = "Logical shift right."
dict_info["vsra"] = "Arithmetic shift right."
dict_info["vnsrl"] = "Narrowing shift right logical, SEW = (2*SEW) >> SEW."
dict_info["vnsra"] = "Narrowing shift right arithmetic, SEW = (2*SEW) >> SEW."
dict_info["vmseq"] = "Integer compare instruction to set bit if equal."
dict_info["vmsne"] = "Integer compare instruction to set bit if not equal."
dict_info["vmsltu"] = "Integer compare instruction to set bit if less than, unsigned."
dict_info["vmslt"] = "Integer compare instruction to set bit if less than, signed."
dict_info["vmsleu"] = "Integer compare instruction to set bit if less than or equal, unsigned."
dict_info["vmsle"] = "Integer compare instruction to set bit if less than or equal, signed."
dict_info["vmsgtu"] = "Integer compare instruction to set bit if greater than, unsigned."
dict_info["vmsgt"] = "Integer compare instruction to set bit if greater than, signed."
dict_info["vminu"] = "Unsigned minimum."
dict_info["vmin"] = "Signed minimum."
dict_info["vmaxu"] = "Unsigned maximum."
dict_info["vmax"] = "Signed maximum."
dict_info["vmul"] = "Signed multiply, returning low bits of product."
dict_info["vmulh"] = "Signed multiply, returning high bits of product."
dict_info["vmulhu"] = "Unsigned multiply, returning low bits of product."
dict_info["vmulhsu"] = "Signed(vs2)-Unsigned multiply, returning high bits of product."
dict_info["vdivu"] = "Unsigned divide."
dict_info["vdiv"] = "Signed divide."
dict_info["vremu"] = "Unsigned remainder."
dict_info["vrem"] = "Signed remainder."
dict_info["vwmul"] = "Widening signed-integer multiply."
dict_info["vwmulu"] = "Widening unsigned-integer multiply."
dict_info["vwmulsu"] = "Widening signed(vs2)-unsigned integer multiply."
dict_info["vmacc"] = "Integer multiply-add, overwrite addend."
dict_info["vnmsac"] = "Integer multiply-sub, overwrite minuend."
dict_info["vmadd"] = "Integer multiply-add, overwrite multiplicand."
dict_info["vnmsub"] = "Integer multiply-sub, overwrite multiplicand."
dict_info["vwmaccu"] = "Widening unsigned-integer multiply-add, overwrite addend."
dict_info["vwmacc"] = " Widening signed-integer multiply-add, overwrite addend."
dict_info["vwmaccsu"] = "Widening signed-unsigned-integer multiply-add, overwrite addend."
dict_info["vwmaccus"] = "Widening unsigned-signed-integer multiply-add, overwrite addend."
dict_info["vmerge"] = "Combine two source operands based on a mask."
dict_info["vmv"] = "Copy a source operand to a vector register group."

"""12. Vector Fixed-Point Arithmetic Instructions"""
dict_info["vsaddu"] = "Saturating adds of unsigned integers."
dict_info["vsadd"] = "Saturating adds of signed integers."
dict_info["vssubu"] = "Saturating subtract of unsigned integers."
dict_info["vssub"] = "Saturating subtract of signed integers."
dict_info["vaaddu"] = "Averaging adds of unsigned integers."
dict_info["vaadd"] = "Averaging adds of signed integers."
dict_info["vasubu"] = "Averaging subtract of unsigned integers."
dict_info["vasub"] = "Averaging subtract of signed integers."
dict_info["vsmul"] = "Signed saturating and rounding fractional multiply."
dict_info["vssrl"] = "Scaling shift right logical."
dict_info["vssra"] = "Scaling shift right arithmetic."
dict_info["vnclipu"] = "Narrowing unsigned clip."
dict_info["vnclip"] = "Narrowing signed clip."

""""13. Vector Floating-Point Instructions"""
dict_info["vfadd"] = "Floating-point add."
dict_info["vfsub"] = "Floating-point subtract."
dict_info["vfrsub"] = "Floating-point reverse subtract, vd[i] = f[rs1] - vs2[i]"
dict_info["vfwadd"] = "Widening FP add, 2*SEW = SEW + SEW."
dict_info["vfwsub"] = "Widening FP subtract, 2*SEW = SEW - SEW."
dict_info["vfwadd.w"] = "Widening FP add, 2*SEW = 2*SEW + SEW."
dict_info["vfwsub.w"] = "Widening FP subtract, 2*SEW = 2*SEW - SEW."
dict_info["vfmul"] = "Floating-point multiply."
dict_info["vfdiv"] = "Floating-point divide."
dict_info["vfrdiv"] = "Reverse floating-point divide vector = scalar / vector."
dict_info["vfwmul"] = "Widening floating-point multiply."
dict_info["vfmacc"] = "FP multiply-accumulate, overwrites addend."
dict_info["vfnmacc"] = "FP negate-(multiply-accumulate), overwrites subtrahend."
dict_info["vfmsac"] = "FP multiply-subtract-accumulator, overwrites subtrahend."
dict_info["vfnmsac"] = "FP negate-(multiply-subtract-accumulator), overwrites minuend."
dict_info["vfmadd"] = "FP multiply-add, overwrites multiplicand."
dict_info["vfnmadd"] = "FP negate-(multiply-add), overwrites multiplicand."
dict_info["vfmsub"] = "FP multiply-sub, overwrites multiplicand."
dict_info["vfnmsub"] = "FP negate-(multiply-sub), overwrites multiplicand."
dict_info["vfwmacc"] = "FP widening multiply-accumulate, overwrites addend."
dict_info["vfwnmacc"] = "FP widening negate-(multiply-accumulate), overwrites addend."
dict_info["vfwmsac"] = "FP widening multiply-subtract-accumulator, overwrites addend."
dict_info["vfwnmsac"] = "FP widening negate-(multiply-subtract-accumulator), overwrites addend."
dict_info["vfsqrt"] = "Floating-point square root."
dict_info["vfrsqrt7"] = "Floating-point reciprocal square-root estimate to 7 bits."
dict_info["vfrec7"] = "Floating-point reciprocal estimate to 7 bits."
dict_info["vfmin"] = "Floating-point minimum."
dict_info["vfmax"] = "Floating-point maximum."
dict_info["vfsgnj"] = "Produces a result that takes all bits except the sign bit from vs1/rs1. The result's sign bit is vs2's sign bit."
dict_info["vfsgnjn"] = "Produces a result that takes all bits except the sign bit from vs1/rs1. The result's sign bit is opposite of vs2's sign bit."
dict_info["vfsgnjx"] = "Produces a result that takes all bits except the sign bit from vs1/rs1. The result's sign bit is XOR of vs2's sign bit."
dict_info["vmfeq"] = "Floating-point compare instruction to set bit if equal."
dict_info["vmfne"] = "Floating-point compare instruction to set bit if not equal."
dict_info["vmflt"] = "Floating-point compare instruction to set bit if less than."
dict_info["vmfle"] = "Floating-point compare instruction to set bit if less than or equal."
dict_info["vmfgt"] = "Floating-point compare instruction to set bit if greater than."
dict_info["vmfge"] = "Floating-point compare instruction to set bit if greater than or equal."
dict_info["vfclass"] = "Unary vector-vector classify instruction."            
dict_info["vfmerge"] = "Vector-scalar floating-point merge instruction."
dict_info["vfmv"] = "Vector floating-point move instruction."
dict_info["vfcvt"] = "Single-width floating-Point type-convert."
dict_info["vfwcvt"] = "Widening floating-Point type-convert."
dict_info["vfncvt"] = "Narrowing floating-Point type-convert."

"""14. Vector Reduction Operations"""
dict_info["vredsum"] = "Vector single-width integer reduction instruction, vd[0] = sum( vs1[0] , vs2[*] ) where [*] denotes all active elements."
dict_info["vredmaxu"] = "Vector single-width integer reduction instruction, vd[0] = maxu( vs1[0] , vs2[*] ) where [*] denotes all active elements."
dict_info["vredmax"] = "Vector single-width integer reduction instruction, vd[0] = max( vs1[0] , vs2[*] ) where [*] denotes all active elements."
dict_info["vredminu"] = "Vector single-width integer reduction instruction, vd[0] = minu( vs1[0] , vs2[*] ) where [*] denotes all active elements."
dict_info["vredmin"] = "Vector single-width integer reduction instruction, vd[0] = min( vs1[0] , vs2[*] ) where [*] denotes all active elements."
dict_info["vredand"] = "Vector single-width integer reduction instruction, vd[0] = and( vs1[0] , vs2[*] ) where [*] denotes all active elements."
dict_info["vredor"] = "Vector single-width integer reduction instruction, vd[0] = or( vs1[0] , vs2[*] ) where [*] denotes all active elements."
dict_info["vredxor"] = "Vector single-width integer reduction instruction, vd[0] = xor( vs1[0] , vs2[*] ) where [*] denotes all active elements."
dict_info["vwredsumu"] = "Unsigned sum reduction into double-width accumulator."
dict_info["vwredsum"] = "Signed sum reduction into double-width accumulator."
dict_info["vfredosum"] = "Vector single-width floating-point reduction instruction with ordered sum."   
dict_info["vfredusum"] = "Vector single-width floating-point reduction instruction with unordered sum."
dict_info["vfredmax"] = "Vector single-width floating-point reduction instruction with maximum value."
dict_info["vfredmin"] = "Vector single-width floating-point reduction instruction with minimum value."
dict_info["vfwredosum"] = "Vector widening floating-point reduction instruction with ordered sum."
dict_info["vfwredusum"] = "Vector widening floating-point reduction instruction with unordered sum."

"""15. Vector Mask Instructions"""
dict_info["vmand"] = "Vector mask-register logical operation,  vd.mask[i] = vs2.mask[i] && vs1.mask[i]."
dict_info["vmnand"] = "Vector mask-register logical operation,  vd.mask[i] = !(vs2.mask[i] && vs1.mask[i])."
dict_info["vmandn"] = "Vector mask-register logical operation,  vd.mask[i] = vs2.mask[i] && !vs1.mask[i]."
dict_info["vmandnot"] = "Vector mask-register logical operation,  vd.mask[i] = vs2.mask[i] && !vs1.mask[i].\nThe previous assembler mnemonic 'vmandnot' have been changed to 'vmandn' to be consistent with the \
equivalent scalar instructions. The old mnemonic can be retained as assembler aliases for compatibility."
dict_info["vmornot"] = "Vector mask-register logical operation,  vd.mask[i] = vs2.mask[i] || !vs1.mask[i].\nThe previous assembler mnemonic 'vmornot' have been changed to 'vmorn' to be consistent with the \
equivalent scalar instructions. The old mnemonic can be retained as assembler aliases for compatibility."
dict_info["vmxor"] = "Vector mask-register logical operation,  vd.mask[i] = vs2.mask[i] ^^ vs1.mask[i]."
dict_info["vmor"] = "Vector mask-register logical operation,  vd.mask[i] = vs2.mask[i] || vs1.mask[i]."
dict_info["vmnor"] = "Vector mask-register logical operation,  vd.mask[i] = !(vs2.mask[i] || vs1.mask[i])."
dict_info["vmorn"] = "Vector mask-register logical operation,  vd.mask[i] = vs2.mask[i] || !vs1.mask[i]."
dict_info["vmxnor"] = "Vector mask-register logical operation,  vd.mask[i] = !(vs2.mask[i] ^^ vs1.mask[i])."
dict_info["vcpop"] = "Vector count population in mask. Counts the number of mask elements of the active elements of the vector source mask register.\
that have the value 1 and writes the result to a scalar x register."
dict_info["vfirst"] = "Find-rst-set mask bit. Finds the lowest-numbered active element of the source mask vector that has the value 1 and \
writes that element's index to a GPR. If no active element has the value 1, -1 is written to the GPR."
dict_info["vmsbf"] = "Set-before-rst mask bit. Takes a mask register as input and writes results to a mask register."
dict_info["vmsif"] = "Set-including-rst mask bit. It is similar to set-before-rst, except it also includes the element with a set bit."
dict_info["vmsof"] = "Set-only-rst mask bit. It is similar to set-before-rst, except it only sets the rst element with a bit set, if any."
dict_info["viota"] = "Reads a source vector mask register and writes to each element of the destination vector register \
group the sum of all the bits of elements in the mask register whose index is less than the element, e.g., a parallel prex sum of the mask values."
dict_info["vid"] = "Vector element index instruction. Writes each element's index to the destination vector register group, from 0 to vl-1."

"""16. Vector Permutation Instructions"""
dict_info["vmerge/vmv"] = "Combines two source operands based on a mask, or copies a source operand to a vector register group if unmasked."
dict_info["vfmerge/vfmv"] = "Combines two source operands based on a mask, or copies a source operand to a vector register group if unmasked."
# dict_info["vmv"] = "Transfers a single value between a scalar x register and element 0 of a vector register."
# dict_info["vfmv"] = "Transfers a single value between a scalar f register and element 0 of a vector register."
dict_info["vslideup"] = "Moves elements up a vector register group."
dict_info["vslidedown"] = "Moves elements down a vector register group."
dict_info["vslide1up"] = "Places the x register argument at location 0 of the destination vector register group, vd[0]=x[rs1], vd[i+1] = vs2[i]."
dict_info["vfslide1up"] = "Places the x register argument at location 0 of the destination vector register group, vd[0] = f[rs1], vd[i+1] = vs2[i]."
dict_info["vslide1down"] = "Copies the rst vl-1 active elements values from index i+1 in the source vector register group to index i in the destination vector register group, vd[i] = vs2[i+1], vd[vl-1] = x[rs1]."
dict_info["vfslide1down"] = "Copies the rst vl-1 active elements values from index i+1 in the source vector register group to index i in the destination vector register group,  vd[i] = vs2[i+1], vd[vl-1] = f[rs1]."
dict_info["vrgather"] = "Reads elements from a rst source vector register group at locations given by a second source vector register group."
dict_info["vrgatherei16"] = "Similar to vrgather, except to use SEW/LMUL for the data in vs2 but EEW=16 and EMUL = (16/SEW)*LMUL for the indices in vs1."
dict_info["vcompress"] = "Allows elements selected by a vector mask register from a source vector register group to be packed into contiguous elements at the start of the destination vector register group."
dict_info[""] = ""
dict_info[""] = ""
dict_info[""] = ""
dict_info[""] = ""
dict_info[""] = ""
dict_info[""] = ""
dict_info[""] = ""
dict_info[""] = ""
dict_info[""] = ""


list_integer = ['vadd', 'vsub', 'vrsub', 'vwaddu', 'vwsubu', 'vwadd', 'vwsub', 'vwaddu.w', 'vwsubu.w', 'vwadd.w', 'vwsub.w', 'vzext', 'vsext', 'vadc', 'vmadc', 'vsbc', 'vmsbc', 'vand', 'vor', 'vxor', 'vsll', 'vsrl', 'vsra', 'vnsrl', 'vnsra', 'vmseq', 'vmsne', 'vmsltu', 'vmslt', 'vmsleu', 'vmsle', 'vmsgtu', 'vmsgt', 'vminu', 'vmin', 'vmaxu', 'vmax', 'vmul', 'vmulh', 'vmulhu', 'vmulhsu', 'vdivu', 'vdiv', 'vremu', 'vrem', 'vwmul', 'vwmulu', 'vwmulsu', 'vmacc', 'vnmsac', 'vmadd', 'vnmsub', 'vwmaccu', 'vwmacc', 'vwmaccsu', 'vwmaccus', 'vmerge', 'vmv']
list_fixed_point = ['vsaddu', 'vsadd', 'vssubu', 'vssub', 'vaaddu', 'vaadd', 'vasubu', 'vasub', 'vsmul', 'vssrl', 'vssra', 'vnclipu', 'vnclip']
list_floating_point = ['vfadd', 'vfsub', 'vfrsub', 'vfwadd', 'vfwsub', 'vfwadd.w', 'vfwsub.w', 'vfmul', 'vfdiv', 'vfrdiv', 'vfwmul', 'vfmacc', 'vfnmacc', 'vfmsac', 'vfnmsac', 'vfmadd', 'vfnmadd', 'vfmsub', 'vfnmsub', 'vfwmacc', 'vfwnmacc', 'vfwmsac', 'vfwnmsac', 'vfsqrt', 'vfrsqrt7', 'vfrec7', 'vfmin', 'vfmax', 'vfsgnj', 'vfsgnjn', 'vfsgnjx', 'vmfeq', 'vmfne', 'vmflt', 'vmfle', 'vmfgt', 'vmfge', 'vfclass', 'vfmerge', 'vfmv', 'vfcvt', 'vfwcvt', 'vfncvt']
list_reduction = ['vredsum', 'vredmaxu', 'vredmax', 'vredminu', 'vredmin', 'vredand', 'vredor', 'vredxor', 'vwredsumu', 'vwredsum', 'vfredosum', 'vfredusum', 'vfredmax', 'vfredmin', 'vfwredosum', 'vfwredusum']
list_mask = ['vmand', 'vmnand', 'vmandn', 'vmandnot', 'vmornot', 'vmxor', 'vmor', 'vmnor', 'vmorn', 'vmxnor', 'vcpop', 'vfirst', 'vmsbf', 'vmsif', 'vmsof', 'viota', 'vid']
list_permutation = ['vslideup', 'vslidedown', 'vslide1up', 'vfslide1up', 'vslide1down', 'vfslide1down', 'vrgather', 'vrgatherei16', 'vcompress']

list_integer.append("VXUNARY0")
list_permutation.extend(["VRXUNARY0", "VWXUNARY0", "VRFUNARY0", "VWFUNARY0", "vmerge/vmv", "vfmerge/vfmv"])
list_mask.extend(["VWXUNARY0", "VMUNARY0"])
list_floating_point.extend(["VFUNARY0", "VFUNARY1"])


if __name__ == "__main__":
    print(len(dict_info))
    # print(dict_info.keys())